% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/domainCov.R
\name{domainCov}
\alias{domainCov}
\title{Distribution of annotation density within domains}
\usage{
domainCov(
  domain.gr,
  annot.gr,
  domain.col = NULL,
  annot.col = NULL,
  bin.width = 50000,
  norm = FALSE,
  output = "plot"
)
}
\arguments{
\item{domain.gr}{\code{GRanges} with domains (TADs, compartments...).}

\item{annot.gr}{\code{GRanges} with genomic annotations (genes, repeat elements...).}

\item{domain.col}{Column number (metadata columns) used to split domain classes (e.g. column to differentiate compartments A and B). By default, domain.col is \code{NULL}.}

\item{annot.col}{Column number (metadata columns) used to split annotations. By default, annot.col = \code{NULL}. Use \code{"strand"} in order to separate annotations according to their strands.}

\item{bin.width}{Size of the bin in base pairs. It should match the bin.width of the matrix used to call the domains.}

\item{norm}{Logical. Normalized density using relative content (zscore of density). Default is \code{FALSE}.}

\item{output}{Default is \code{"plot"} to return a \code{ggplot}. Use \code{"data"} to return the \code{dataframe} used to produce the plot.}
}
\value{
\code{ggplot}
}
\description{
Distribution of annotations density (e.g. density  of genes) within domains (e.g. TADs, compartments...).
\code{domainCov()} calculates the annotations density per bin and measures the relative position of each bin within the domain
}
\details{
As an example, this function take all TAD domains and calculate the density of annotations by:
\itemize{
\item calculate the annotations density per bin,
\item calculate the relative positions of each bin within his corresponding TAD,
\item plot the smoothed bin density (or zscore bin density) according to relative positions.
}
}
\examples{
# see vignette("Turorial_TADkit_R_package") or on github (https://github.com/Nico-FR/TADkit)

#library(EnsDb.Hsapiens.v86)
#library(GenomicFeatures)

# get gene annotations
#genomic.gr =  genes(EnsDb.Hsapiens.v86, filter = ~ seq_name == c(1:22))
#seqlevelsStyle(genomic.gr) = "UCSC"
#genes.gr = genomic.gr[as.character(genomic.gr$gene_biotype) == "protein_coding"]

# get compartments annotations
#comp.gr = PC1calling(PC1_250kb.gr)

#domainCov(domain.gr = comp.gr, annot.gr = genes.gr,
#        domain.col = 1,
#        bin.width = 50e3, norm = TRUE)
}
